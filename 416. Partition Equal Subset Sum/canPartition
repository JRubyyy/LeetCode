class Solution {
private:
    // memo[i][c] 表示使用索引为[0...i]的这些元素,是否可以完全填充一个容量为c的背包
    // -1 表示为未计算; 0 表示不可以填充; 1 表示可以填充
    vector<vector<int>> memo;
    bool tryPartition(const vector<int>& nums,int index,int sum) {
        // 填充容量为sum的背包
        
        // 背包里没有任何空间
        if (sum == 0) return true;
        
        // 填充的物品多了 || 无物品可选，但背包里还有空间
        if (sum <= 0 || index < 0) return false;
        
        if (memo[index][sum] != -1) return memo[index][sum] == 1;
        
        // 尝试用[0...index-1]这些nums填充大小为sum的背包
        memo[index][sum] = (tryPartition(nums,index-1,sum) || tryPartition(nums,index-1,sum - nums[index]) ? 1 : 0);
        return memo[index][sum] == 1;
    }
public:
    // 背包问题
    bool canPartition(vector<int>& nums) {
        
        int sum = 0;
        for (int i=0; i<nums.size(); i++) {
            assert(nums[i] > 0);
            sum += nums[i];
        }
        
        if (sum%2 != 0) return false;
        memo = vector<vector<int>>(nums.size(),vector<int>(sum/2+1,-1));
        return tryPartition(nums,nums.size()-1,sum/2);
    }
};
